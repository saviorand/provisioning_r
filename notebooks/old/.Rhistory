withoutOutcomes <- withOutcomes[ , c(1, 85)]
View(withoutOutcomes)
withoutOutcomes <- withOutcomes[ , c(1:85)]
View(withoutOutcomes)
View(withoutOutcomes)
withoutOutcomes <- withOutcomes[ , c(11:85)]
View(withoutOutcomes)
View(withOutcomes)
lifeExpectancy <- withOutcomes[, 89]
lifeExpectancy <- withOutcomes$lifeexpectancy
set.seed(10)
ctrl <- rfeControl(functions = lmFuncs,
method = "repeatedcv",
repeats = 5,
verbose = FALSE)
?rfe
lmProfile <- rfe(withoutOutcomes, lifeExpectancy,
sizes = 10,
rfeControl = ctrl)
lmProfile <- rfe(withoutOutcomes, lifeExpectancy,
sizes = 10,
rfeControl = ctrl)
lmProfile <- rfe(withoutOutcomes, lifeExpectancy,
sizes = 10,
rfeControl = ctrl,
na.rm = TRUE)
lmProfile <- rfe(withoutOutcomes, lifeExpectancy,
sizes = 10,
rfeControl = ctrl,
na.action = na.omit)
lmProfile <- rfe(withoutOutcomes, lifeExpectancy,
sizes = 10,
rfeControl = ctrl,
na.action = na.omit())
var_df <- withoutOutcomes
var_df[var_df == ".."] <- NA
var_df$concentration <- gsub(",",".",var_df$concentration)
testDF_imputed <- imputePCA(var_df, ncp=2, maxiter=1000000)
testDF_toimpute <- var_df %>% select(!c("Country.Code", "Year")) %>% select_if(function(v) var(v, na.rm=TRUE) != 0)
testDF_toimpute <- var_df %>% select_if(function(v) var(v, na.rm=TRUE) != 0)
# %>% select(!c("Country.Code", "Year"))
testDF_imputed <- imputePCA(testDF_toimpute, ncp=2, maxiter=1000000)
View(testDF_toimpute)
var_df[cols] <- lapply(var_df[cols], as.numeric)
var_df <- withoutOutcomes
var_df[var_df == ".."] <- NA
cols <- names(var_df)
var_df[cols] <- lapply(var_df[cols], as.numeric)
testDF_toimpute <- var_df %>% select_if(function(v) var(v, na.rm=TRUE) != 0)
# %>% select(!c("Country.Code", "Year"))
testDF_imputed <- imputePCA(testDF_toimpute, ncp=2, maxiter=1000000)
# %>% select(!c("Country.Code", "Year"))
testDF_imputed <- imputePCA(testDF_toimpute, ncp=2, maxiter=1000000)
testDF_toimpute <- var_df %>% select_if(function(v) var(v, na.rm=TRUE) != 0)
testDF_imputed <- imputePCA(testDF_toimpute, ncp=2, maxiter=1000000)
View(testDF_toimpute)
#testDF_filtered <- testDFSelectedValuesNoIncome %>% filter(region == "Europe & Central Asia") %>% filter(Year == 2018) %>% select(!c("X","X.1","X.2", "X.3", "X.4"))
testDF_filtered <- withoutOutcomes
var_df[var_df == ".."] <- NA
cols <- names(var_df)
var_df$concentration <- gsub(",",".",var_df$concentration)
var_df[cols] <- lapply(var_df[cols], as.numeric)
testDF_toimpute <- var_df  %>% select_if(function(v) var(v, na.rm=TRUE) != 0)
testDF_imputed <- imputePCA(testDF_toimpute, ncp=2, maxiter=1000000)
View(testDF_imputed)
View(testDF_imputed)
testDF_imputed$completeObs
typeof(testDF_imputed$completeObs)
lifeExpectancy <- testDF_imputed$completeObs
View(lifeExpectancy)
imputed <- testDF_imputed$completeObs
lifeExpectancy <- imputed$lifeExpectancy
lifeExpectancy <- select(imputed, lifeExpectancy)
lifeExpectancy <- imputed[, "lifeexpectancy"]
View(imputed)
lifeExpectancy <- withOutcomes$lifeexpectancy
lmProfile <- rfe(imputed, lifeExpectancy,
sizes = 10,
rfeControl = ctrl,
na.action = na.omit())
lifeExpectancy_imputed <- imputePCA(lifeExpectancy, ncp=2, maxiter=1000000)
le_imputed <- lifeExpectancy[is.na(lifeExpectancy)] <- mean(lifeExpectancy, na.rm = TRUE)
lmProfile <- rfe(imputed, le_imputed,
sizes = 10,
rfeControl = ctrl,
na.action = na.omit())
lifeExpectancy[is.na(lifeExpectancy)] <- mean(lifeExpectancy, na.rm = TRUE)
lmProfile <- rfe(imputed, lifeExpectancy,
sizes = 10,
rfeControl = ctrl,
na.action = na.omit())
lmProfile <- rfe(imputed, lifeExpectancy,
sizes = 10,
rfeControl = ctrl,
na.action = na.omit)
lmProfile
lifeExpectancy <- withOutcomes$lifesatisfaction
lifeExpectancy[is.na(lifeExpectancy)] <- mean(lifeExpectancy, na.rm = TRUE)
lmProfile <- rfe(imputed, lifeExpectancy,
sizes = 10,
rfeControl = ctrl,
na.action = na.omit)
lmProfile
lifeExpectancy <- withOutcomes$education
lifeExpectancy[is.na(lifeExpectancy)] <- mean(lifeExpectancy, na.rm = TRUE)
lmProfile <- rfe(imputed, lifeExpectancy,
sizes = 10,
rfeControl = ctrl,
na.action = na.omit)
lmProfile
source("../../r/utils/functions.R")
withOutcomes <- read.csv("../../data/after_clean/data_frames/withOutcomes.csv")
withoutOutcomes <- withOutcomes[ , c(11:85)]
View(withoutOutcomes)
source("../../r/utils/functions.R")
withOutcomes <- read.csv("../../data/after_clean/data_frames/withOutcomes.csv")
values_worry_cols <- c("WorryGovPrivacy", "WorryWar", "WorryTerrorist", "WorryCivilWar")
values_worry_educ <- "WorryEduc" # only this not excluded
values_conf_cols <- c("ConfCourts", "ConfParties", "ConfCivilService", "ConfGov", "ConfParliament")
values_accept_cols <- c("BeatWife", "Violence", "TaxCheat", "AcceptBribe", "StealProp")
values_member_cols <- c("SelfHelpOrgMember", "ProfOrgMember", "CharityOrgMember", "ConsumOrgMember", "EnvOrgMember")
values_religion_cols <- c("BelieveGod")
values_child_faith <- c("ChildFaith")
all_values_cols <- c(values_worry_cols, values_conf_cols, values_accept_cols, values_member_cols, values_religion_cols, values_worry_educ, values_child_faith)
few_obs_cols <- c("femalemanager", "informal", "gendergap")
## Income columns. We control for these by using income groups so safe to remove
income_cols <- c("gdppercap", "gnipercap")
wealth_cols <- c("wealth", "wealthincome")
# testDFComplete <- wbJoinedSorted %>% filter(Country.Name != "")
# testDFSelectedValues <- wbJoinedSorted %>% select(!c(values_worry_cols, values_conf_cols,values_religion_cols, values_member_cols, few_obs_cols)) %>% filter(Country.Name != "")
#testDFNoValuesNoFewObs <- wbJoinedSorted %>% select(!c(all_values_cols, few_obs_cols)) %>% filter(Country.Name != "")
testDFNoValuesNoFewObsNoIncome <- wbJoinedSorted %>% select(!c(all_values_cols, few_obs_cols, income_cols)) %>% filter(Country.Name != "")
wbJoinedSorted <- withOutcomes %>% arrange(Country.Code, Year)
# testDFComplete <- wbJoinedSorted %>% filter(Country.Name != "")
# testDFSelectedValues <- wbJoinedSorted %>% select(!c(values_worry_cols, values_conf_cols,values_religion_cols, values_member_cols, few_obs_cols)) %>% filter(Country.Name != "")
#testDFNoValuesNoFewObs <- wbJoinedSorted %>% select(!c(all_values_cols, few_obs_cols)) %>% filter(Country.Name != "")
testDFNoValuesNoFewObsNoIncome <- wbJoinedSorted %>% select(!c(all_values_cols, few_obs_cols, income_cols)) %>% filter(Country.Name != "")
#testDF_filtered <- testDFSelectedValuesNoIncome %>% filter(region == "Europe & Central Asia") %>% filter(Year == 2018) %>% select(!c("X","X.1","X.2", "X.3", "X.4"))
testDF_filtered <- testDFNoValuesNoFewObsNoIncome
testDF_indexed <- testDF_filtered %>% column_to_rownames(., var = 'Country.Name')
var_df <- testDF_filtered %>% select(!c("incomegroup", "region")) %>% rename(ID = "X.5")
incomeGroupAndRegion <- testDF_filtered %>% select(c("incomegroup", "region"))
var_df[var_df == ".."] <- NA
cols <- names(var_df)[5:66]
var_df$concentration <- gsub(",",".",var_df$concentration)
var_df[cols] <- lapply(var_df[cols], as.numeric)
testDF_toimpute <- var_df %>% select(!c("Country.Code", "Year")) %>% select_if(function(v) var(v, na.rm=TRUE) != 0)
testDF_imputed <- imputePCA(testDF_toimpute, ncp=2, maxiter=1000000)
imputed <- testDF_imputed$completeObs
imputed_nolifeexp <- select(imputed, !lifeExpectancy)
imputed_nolifeexp <- imputed[, !"lifeexpectancy"]
lifeExpectancy <- imputed[["lifeexpectancy"]]
View(imputed)
index = which(colnames(imputed) == "lifeExpectancy")
lifeExpectancy <- imputed[["lifexpectancy"]]
index = which(colnames(imputed) == "lifeexpectancy")
exceptLifeExpectancy = imputed[,-index]
lifeExpectancy <- imputed[,index]
lmProfile <- rfe(exceptLifeExpectancy, lifeExpectancy,
sizes = 10,
rfeControl = ctrl,
na.action = na.omit)
ctrl <- rfeControl(functions = lmFuncs,
method = "repeatedcv",
repeats = 5,
verbose = FALSE)
lmProfile <- rfe(exceptLifeExpectancy, lifeExpectancy,
sizes = 10,
rfeControl = ctrl,
na.action = na.omit)
lmProfile
index = which(colnames(imputed) == "education")
exceptLifeExpectancy = imputed[,-index]
lifeExpectancy <- imputed[,index]
ctrl <- rfeControl(functions = lmFuncs,
method = "repeatedcv",
repeats = 5,
verbose = FALSE)
lmProfile <- rfe(exceptLifeExpectancy, lifeExpectancy,
sizes = 10,
rfeControl = ctrl,
na.action = na.omit)
lmProfile
index = which(colnames(imputed) == "lifesatisfaction")
exceptLifeExpectancy = imputed[,-index]
lifeExpectancy <- imputed[,index]
set.seed(10)
ctrl <- rfeControl(functions = lmFuncs,
method = "repeatedcv",
repeats = 5,
verbose = FALSE)
lmProfile <- rfe(exceptLifeExpectancy, lifeExpectancy,
sizes = 10,
rfeControl = ctrl,
na.action = na.omit)
lmProfile
index = which(colnames(imputed) == "education")
exceptLifeExpectancy = imputed[,-index]
lifeExpectancy <- imputed[,index]
set.seed(10)
ctrl <- rfeControl(functions = lmFuncs,
method = "repeatedcv",
repeats = 5,
verbose = FALSE)
lmProfile <- rfe(exceptLifeExpectancy, lifeExpectancy,
sizes = 10,
rfeControl = ctrl,
na.action = na.omit)
lmProfile
View(imputed)
exceptOutcomes = imputed[,8:55]
View(exceptLifeExpectancy)
View(exceptOutcomes)
index = which(colnames(imputed) == "lifeexpectancy")
lifeExpectancy <- imputed[,index]
set.seed(10)
ctrl <- rfeControl(functions = lmFuncs,
method = "repeatedcv",
repeats = 5,
verbose = FALSE)
lmProfile <- rfe(exceptOutcomes, lifeExpectancy,
sizes = 10,
rfeControl = ctrl,
na.action = na.omit)
lmProfile
write.csv)exceptOutcomes,
?write.csv
write.csv)exceptOutcomes, "exceptOutcomes.csv")
write.csv(exceptOutcomes, "exceptOutcomes.csv")
outcomes <- imputed[,1:8]
View(outcomes)
outcomes <- imputed[,55:]
View(imputed)
outcomes <- imputed[,55:63]
write.csv(outcomes, "outcomes.csv")
View(outcomes)
outcomes <- imputed[,56:63]
write.csv(outcomes, "outcomes.csv")
View(withOutcomes)
View(exceptOutcomes)
View(outcomes)
countryYear <- var_df %>% select(!c("Country.Code", "Year"))
outcomesWithCountries <- cbind(countryYear, outcomes)
View(outcomes)
View(outcomesWithCountries)
countryYear <- var_df %>% select(c("Country.Code", "Year"))
outcomesWithCountries <- cbind(countryYear, outcomes)
View(outcomesWithCountries)
View(var_df)
View(testDF_filtered)
View(var_df)
testDF_indexed <- testDF_filtered %>% column_to_rownames(., var = 'Country.Name')
var_df <- testDF_filtered %>% select(!c("incomegroup", "region")) %>% rename(ID = "X.5")
View(var_df)
incomeGroupAndRegion <- testDF_filtered %>% select(c("incomegroup", "region"))
countryYear <- var_df %>% select(c("Country.Code", "Year"))
var_df[var_df == ".."] <- NA
View(var_df)
View(var_df)
cols <- names(var_df)[12:66]
cols <- names(var_df)[11:66]
var_df$concentration <- gsub(",",".",var_df$concentration)
var_df[cols] <- lapply(var_df[cols], as.numeric)
View(var_df)
View(countryYear)
outcomesWithCountries <- cbind(countryYear, outcomes)
View(outcomesWithCountries)
indicatorsWithCountries <- cbind(countryYear, exceptOutcomes)
View(indicatorsWithCountries)
write.csv(outcomesWithCountries, "outcomes.csv")
write.csv(indicatorsWithCountries, "indicators.csv")
energyuse <- read.csv("./Static/WB/pivoted/formatted/energyuse.csv")
energyuse <- read.csv("../../wb_pivoted/formatted/energyuse.csv")
energyuse <- read.csv("../../data/after_clean/wb_pivoted/formatted/energyuse.csv")
View(energyuse)
energyuse[energyuse == ".." <- NA]
energyuse[energyuse == ".."] <- NA
energyuseWithCountries <- select(energyuse, Country.Code != NA)
energyuseWithCountries <- select(energyuse, Country.Code != "")
energyuseWithCountries <- energyuse %>% select(Country.Code != "")
energyuseWithCountries <- energyuse %>% select(!is.na(Country.Code))
energyuseWithCountries <- energyuse %>% select(!is.na(Country.Code))
energyuseWithCountries <- energyuse %>% select(!is.na("Country.Code"))
energyuseWithCountries <- energyuse %>% filter(!is.na("Country.Code"))
View(energyuseWithCountries)
energyuseWithCountries <- energyuse %>% filter("Country.Code" != "")
energyuseWithCountries <- energyuse %>% filter(Country.Code != "")
energyuse[energyuse == ".."] <- 0
View(energyuse)
energyuse <- read.csv("../../data/after_clean/wb_pivoted/formatted/energyuse.csv")
energyuse[energyuse == ".."] <- 0
energyuseWithCountries <- energyuse %>% filter(Country.Code != "")
write.csv(energyuseWithCountries, "energyuse.csv")
lifeExpectancyWithCountries <- outcomesWithCountries %>% select(c("Country.Code", "Year", "lifeexpectancy"))
View(lifeExpectancyWithCountries)
write.csv(lifeExpectancyWithCountries, "lifeexpectancy.csv")
lifeExpectancyWithEnergyUseWithCountries <- cbind(lifeExpectancyWithCountries, energyuse)
energyUseNoNA <- energyuse %>% filter(Country.Code != "")
energyUseNoNA <- energyuseWithCountries %>% select(!c("Country.Code", "Year"))
View(energyUseNoNA)
lifeExpectancyWithEnergyUseWithCountries <- cbind(lifeExpectancyWithCountries, energyUseNoNA)
lifeExpectancyOverEnergyUseWithCountries <- lifeExpectancyWithEnergyUseWithCountries %>% mutate(lifeexpectancy_over_energy = lifeExpectancy / energyuse)
lifeExpectancyOverEnergyUseWithCountries <- lifeExpectancyWithEnergyUseWithCountries %>% mutate(lifeexpectancy_over_energy = lifeExpectancy / as.numeric(energyuse))
View(lifeExpectancyWithEnergyUseWithCountries)
View(lifeExpectancyOverEnergyUseWithCountries)
lifeExpectancyOverEnergyUseWithCountries <- lifeExpectancyWithEnergyUseWithCountries %>% mutate(lifeexpectancy_over_energy = lifeExpectancy / as.numeric(energyuse)) %>% select(!c("lifeExpectancy", "energyuse"))
lifeExpectancyOverEnergyUseWithCountries <- lifeExpectancyWithEnergyUseWithCountries %>% mutate(lifeexpectancy_over_energy = lifeexpectancy / as.numeric(energyuse)) %>% select(!c("lifeexpectancy", "energyuse"))
View(lifeExpectancyOverEnergyUseWithCountries)
#write.csv(outcomesWithCountries, "outcomes.csv")
#write.csv(lifeExpectancyWithCountries, "lifeexpectancy.csv")
#write.csv(indicatorsWithCountries, "indicators.csv")
#write.csv(energyuseWithCountries, "energyuse.csv")
write.csv(lifeExpectancyOverEnergyUseWithCountries, "lifeexpectancy_over_energy.csv")
energyUseNoNA <- energyuseWithCountries %>% select(!c("Country.Code", "Year")) %>% filter(energyuse !- 0)
energyUseNoNA <- energyuseWithCountries %>% select(!c("Country.Code", "Year")) %>% filter(energyuse != 0)
View(energyUseNoNA)
lifeExpectancyWithEnergyUseList <- list(energyUseNoNA, lifeExpectancyWithEnergyUseWithCountries)
lifeExpectancyWithEnergyUse <- lifeExpectancyWithEnergyUseList %>% reduce(left_join, by=c('Country.Code', 'Year'))
energyUseNoNA <- energyuseWithCountries %>% filter(energyuse != 0)
lifeExpectancyWithEnergyUseList <- list(energyUseNoNA, lifeExpectancyWithEnergyUseWithCountries)
lifeExpectancyWithEnergyUse <- lifeExpectancyWithEnergyUseList %>% reduce(left_join, by=c('Country.Code', 'Year'))
View(lifeExpectancyWithEnergyUse)
indicatorsWithCountries <- cbind(countryYear, exceptOutcomes)
energyuseWithCountries <- energyuse %>% filter(Country.Code != "")
energyUseNoNA <- energyuseWithCountries %>% filter(energyuse != 0)
lifeExpectancyWithEnergyUseList <- list(energyUseNoNA, indicatorsWithCountries)
lifeExpectancyWithEnergyUse <- lifeExpectancyWithEnergyUseList %>% reduce(left_join, by=c('Country.Code', 'Year'))
View(lifeExpectancyWithEnergyUse)
lifeExpectancyWithCountries <- outcomesWithCountries %>% select(c("Country.Code", "Year", "lifeexpectancy"))
lifeExpectancyWithIndicatorsEUseList <- list(indicatorsWithEnergyUseList, lifeExpectancyWithCountries)
indicatorsWithEnergyUseList <- list(energyUseNoNA, indicatorsWithCountries)
indicatorsWithEnergyUse <- lifeExpectancyWithEnergyUseList %>% reduce(left_join, by=c('Country.Code', 'Year'))
lifeExpectancyWithIndicatorsEUseList <- list(indicatorsWithEnergyUseList, lifeExpectancyWithCountries)
lifeExpectancyWithIndicatorsEUseList <- list(indicatorsWithEnergyUse, lifeExpectancyWithCountries)
lifeExpectancyWithIndicatorsEUse <- lifeExpectancyWithIndicatorsEUseList %>% %>% reduce(left_join, by=c('Country.Code', 'Year'))
lifeExpectancyWithIndicatorsEUse <- lifeExpectancyWithIndicatorsEUseList %>% reduce(left_join, by=c('Country.Code', 'Year'))
View(lifeExpectancyWithIndicatorsEUse)
withLEOverEnergyUse <- lifeExpectancyOverEnergyUseWithCountries %>% mutate(lifeexpectancy_over_energy = lifeexpectancy / energyuse) %>% select(!c("lifeexpectancy", "energyuse"))
withLEOverEnergyUse <- lifeExpectancyWithIndicatorsEUse %>% mutate(lifeexpectancy_over_energy = lifeexpectancy / as.numeric(energyuse)) %>% select(!c("lifeexpectancy", "energyuse"))
write.csv(withLEOverEnergyUse, "indicatorsWithEnergyuse.csv")
View(withLEOverEnergyUse)
library(leaps)
leaps(exceptOutcomes, lifeExpectancy)
lmProfile <- rfe(exceptOutcomes, lifeExpectancy,
sizes = 10,
rfeControl = ctrl,
na.action = na.omit)
Best_Subset <-
regsubsets(exceptOutcomes~.,
data =lifeExpectancy,
nbest = 1,      # 1 best model for each number of predictors
nvmax = NULL,    # NULL for no limit on number of variables
force.in = NULL, force.out = NULL,
method = "exhaustive")
Best_Subset <-
regsubsets(lifeExpectancy~.,
data =exceptOutcomes,
nbest = 1,      # 1 best model for each number of predictors
nvmax = NULL,    # NULL for no limit on number of variables
force.in = NULL, force.out = NULL,
method = "exhaustive")
library(tibble)
View(exceptOutcomes)
cols
cols[:48]
cols[1:48]
df_exceptOutcomes <- exceptOutcomes %>%
as_tibble() %>%
setNames(cols[1:48])
View(df_exceptOutcomes)
Best_Subset <-
regsubsets(lifeExpectancy~.,
data =df_exceptOutcomes,
nbest = 1,      # 1 best model for each number of predictors
nvmax = NULL,    # NULL for no limit on number of variables
force.in = NULL, force.out = NULL,
method = "exhaustive")
summary_best_subset <- summary(regsubsets.out)
as.data.frame(summary_best_subset$outmat)
summary_best_subset <- summary(Best_Subset.out)
summary_best_subset <- summary(Best_Subset)
summary_best_subset
View(summary_best_subset)
as.data.frame(summary_best_subset$outmat)
# id: model id
# object: regsubsets object
# data: data used to fit regsubsets
# outcome: outcome variable
get_model_formula <- function(id, object, outcome){
# get models data
models <- summary(object)$which[id,-1]
# Get outcome variable
#form <- as.formula(object$call[[2]])
#outcome <- all.vars(form)[1]
# Get model predictors
predictors <- names(which(models == TRUE))
predictors <- paste(predictors, collapse = "+")
# Build model formula
as.formula(paste0(outcome, "~", predictors))
}
get_model_formula(3, Best_Subset, "lifeexpectancy")
get_cv_error <- function(model.formula, data){
set.seed(1)
train.control <- trainControl(method = "cv", number = 5)
cv <- train(model.formula, data = data, method = "lm",
trControl = train.control)
cv$results$RMSE
}
model.ids <- 1:49
cv.errors <-  map(model.ids, get_model_formula, Best_Subset, "lifeexpectancy") %>%
map(get_cv_error, data = df_exceptOutcomes) %>%
unlist()
model.ids <- 1:48
cv.errors <-  map(model.ids, get_model_formula, Best_Subset, "lifeexpectancy") %>%
map(get_cv_error, data = df_exceptOutcomes) %>%
unlist()
cv.errors <-  map(model.ids, get_model_formula, Best_Subset, "lifeexpectancy") %>%
map(get_cv_error, data = df_exceptOutcomes) %>%
unlist()
model.ids <- 1:48
cv.errors <-  map(model.ids, get_model_formula, Best_Subset, "lifeexpectancy") %>%
map(get_cv_error, data = df_exceptOutcomes) %>%
unlist()
?map
withLEOverEnergyUse
withLEOverEnergyUse
for_best_subset <- withLEOverEnergyUse %>% select(!c("Country.Code", "Year"))
Best_Subset <-
regsubsets(lifeExpectancy~.,
data = lifeexpectancy_over_energy,
nbest = 1,      # 1 best model for each number of predictors
nvmax = 48,    # NULL for no limit on number of variables
force.in = NULL, force.out = NULL,
method = "exhaustive")
Best_Subset <-
regsubsets(lifeexpectancy_over_energy~.,
data = for_best_subset,
nbest = 1,      # 1 best model for each number of predictors
nvmax = 48,    # NULL for no limit on number of variables
force.in = NULL, force.out = NULL,
method = "exhaustive")
summary_best_subset <- summary(Best_Subset)
model.ids <- 1:48
cv.errors <-  map(model.ids, get_model_formula, Best_Subset, "lifeexpectancy") %>%
map(get_cv_error, data = for_best_subset) %>%
unlist()
cv.errors <-  map(model.ids, get_model_formula, Best_Subset, "lifeexpectancy_over_energy") %>%
map(get_cv_error, data = for_best_subset) %>%
unlist()
cv.errors
which.min(cv.errors)
coef(Best_Subset, 18)
sort(coef(Best_Subset, 18))
options(scipen = 999)
which.min(cv.errors)
sort(coef(Best_Subset, 18))
View(for_best_subset)
scale(for_best_subset)
scaled_withLEOverEnergyUse <- scale(withLEOverEnergyUse)
scaled_withLEOverEnergyUse <- withLEOverEnergyUse %>% select(!c("Country.Code", "Year")) %>% scale()
View(scaled_withLEOverEnergyUse)
Best_Subset <-
regsubsets(lifeexpectancy_over_energy~.,
data = scaled_withLEOverEnergyUse,
nbest = 1,      # 1 best model for each number of predictors
nvmax = 48,    # NULL for no limit on number of variables
force.in = NULL, force.out = NULL,
method = "exhaustive")
scaled_withLEOverEnergyUse <- withLEOverEnergyUse %>% select(!c("Country.Code", "Year"))
scaled_withLEOverEnergyUse <- withLEOverEnergyUse %>% select(!c("Country.Code", "Year")) %>% scale()
scaled_withLEOverEnergyUse <- withLEOverEnergyUse %>% select(!c("Country.Code", "Year"))
for_best_subset <- scaled_withLEOverEnergyUse %>% mutate_all(~(scale(.) %>% as.vector))
View(for_best_subset)
Best_Subset <-
regsubsets(lifeexpectancy_over_energy~.,
data = for_best_subset,
nbest = 1,      # 1 best model for each number of predictors
nvmax = 48,    # NULL for no limit on number of variables
force.in = NULL, force.out = NULL,
method = "exhaustive")
summary_best_subset <- summary(Best_Subset)
# id: model id
# object: regsubsets object
# data: data used to fit regsubsets
# outcome: outcome variable
get_model_formula <- function(id, object, outcome){
# get models data
models <- summary(object)$which[id,-1]
# Get outcome variable
#form <- as.formula(object$call[[2]])
#outcome <- all.vars(form)[1]
# Get model predictors
predictors <- names(which(models == TRUE))
predictors <- paste(predictors, collapse = "+")
# Build model formula
as.formula(paste0(outcome, "~", predictors))
}
get_model_formula(3, Best_Subset, "lifeexpectancy_over_energy")
get_cv_error <- function(model.formula, data){
set.seed(1)
train.control <- trainControl(method = "cv", number = 5)
cv <- train(model.formula, data = data, method = "lm",
trControl = train.control)
cv$results$RMSE
}
model.ids <- 1:48
cv.errors <-  map(model.ids, get_model_formula, Best_Subset, "lifeexpectancy_over_energy") %>%
map(get_cv_error, data = for_best_subset) %>%
unlist()
cv.errors
which.min(cv.errors)
sort(coef(Best_Subset, 19))
